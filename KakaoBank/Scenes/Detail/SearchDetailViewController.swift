//
//  SearchDetailViewController.swift
//  KakaoBank
//
//  Created by Yong Seok Kim on 2020/06/29.
//  Copyright (c) 2020 Yong Seok Kim. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxSwift
import RxCocoa

protocol SearchDetailDisplayLogic: class {
    func displaySomething(viewModel: SearchDetail.Something.ViewModel)
}

class SearchDetailViewController: BaseViewController, SearchDetailDisplayLogic {
    var interactor: SearchDetailBusinessLogic?
    var router: (NSObjectProtocol & SearchDetailRoutingLogic & SearchDetailDataPassing)?
    
    
    let disposeBag = DisposeBag()
    var detailItem: SearchResultModel?
    var tableViewCellItems = BehaviorRelay(value: [String]())
    var isReleaseNote: Bool = false
    
    lazy var tableView: UITableView = {
        let tableView = UITableView(frame: .zero, style: .plain)
        tableView.separatorStyle = .none
        tableView.backgroundColor = UIColor.white
        tableView.keyboardDismissMode = .onDrag
        tableView.estimatedRowHeight = 44.0
        tableView.rowHeight = UITableView.automaticDimension
        tableView.allowsSelection = true
        tableView.register(cellType: BasicInfoTableViewCell.self)
        tableView.contentInsetAdjustmentBehavior = .never
        return tableView
    }()
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = SearchDetailInteractor()
        let presenter = SearchDetailPresenter()
        let router = SearchDetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.setComponents()
        self.setTableViewCell()
    }
    
    // MARK: Do something
    
    //@IBOutlet weak var nameTextField: UITextField!
    
//    @IBOutlet weak var tableView: UITableView!
    func doSomething() {
        let request = SearchDetail.Something.Request()
        interactor?.doSomething(request: request)
    }
    
    func displaySomething(viewModel: SearchDetail.Something.ViewModel) {
        //nameTextField.text = viewModel.name
    }
}

extension SearchDetailViewController {
    private func setComponents() {
        self.view.backgroundColor = .white
        
        if let dic = self.detailItem {
            let imageView: UIImageView = UIImageView()
            imageView.downloadImageFrom(urlString: dic.artworkUrl60, imageMode: .scaleAspectFit)
            navigationItem.titleView = imageView            
            navigationItem.titleView?.isHidden = true
        }
            self.tableView.rx.setDelegate(self).disposed(by: disposeBag)
            self.view.addSubview(self.tableView)
            self.setAutolayOut()
        }
        
        private func setAutolayOut() {
            self.tableView.snp.makeConstraints { view -> Void in
                view.left.right.equalTo(self.view)
                view.top.equalTo(self.view.safeAreaLayoutGuide.snp.top).offset(10.0)
                view.bottom.equalTo(self.view.safeAreaLayoutGuide.snp.bottom)
            }
    }


}


// RxTableView
extension SearchDetailViewController {
    private func setTableViewCell() {
        let items = [BasicInfoTableViewCell.identifier]
//                     SearchDetailInfoCell.identifier,
//                     SearchDetailSimpleCell.identifier,
//                     SearchDetailSimpleCell.identifier,
//                     SearchDetailSimpleCell.identifier,
//                     SearchDetailFolderCell.identifier,
//                     SearchDetailDescriptionCell.identifier,
//                     SearchDetailGenreCell.identifier]
        self.tableViewCellItems.accept(items)
        
        self.setTableViewDataSource()
        self.setTableViewSelection()
    }
    
    private func setTableViewDataSource() {
        self.tableViewCellItems
            .asObservable()
            .bind(to: tableView.rx.items) { (tableView: UITableView, index: Int, element: String) -> UITableViewCell in
                guard let item = self.detailItem else {
                    return UITableViewCell()
                }
                
                let indexPath = IndexPath(item: index, section: 0)
                switch element {
                case BasicInfoTableViewCell.identifier:
                    let cell = tableView.dequeueReusableCell(for: indexPath,
                                                             cellType: BasicInfoTableViewCell.self)

                    cell.setup(dic: item)

                    return cell
//                case SearchDetailInfoCell.identifier:
//                    let cell = tableView.dequeueReusableCell(for: indexPath,
//                                                             cellType: SearchDetailInfoCell.self)
//                    cell.setup(title: item.trackName,
//                               companyName: item.artistName,
//                               price: String(Int(item.price).withCommas()))
//                    cell.buttonView.webButton.rx.tap.subscribe(onNext: { [weak self] in
//                        guard let self = self else { return }
//                        self.selectedWebButton()
//                    }).disposed(by: self.disposeBag)
//
//                    cell.buttonView.shareButton.rx.tap.subscribe(onNext: { [weak self] in
//                        guard let self = self else { return }
//                        self.selectedSharebutton()
//                    }).disposed(by: self.disposeBag)
//
//                    return cell
//                case SearchDetailSimpleCell.identifier:
//                    let cell = tableView.dequeueReusableCell(for: indexPath,
//                                                             cellType: SearchDetailSimpleCell.self)
//                    switch index {
//                    case 2:
//                        let size: String = Units(bytes: Int64(item.fileSizeBytes)!).getReadableUnit()
//                        cell.setup(title: "크기",
//                                   info: size)
//                        break
//                    case 3:
//                        cell.setup(title: "연령",
//                                   info: item.trackContentRating)
//                        break
//                    case 4:
//                        cell.setup(title: "새로운 기능",
//                                   info: item.version,
//                                   isFolderable: true)
//                        break
//                    default:
//                        break
//                    }
//                    return cell
//                case SearchDetailFolderCell.identifier:
//                    let cell = tableView.dequeueReusableCell(for: indexPath,
//                                                             cellType: SearchDetailFolderCell.self)
//                    let releaseNotes: String = item.releaseNotes ?? "변경 사항이 없습니다."
//                    let height: CGFloat = releaseNotes.height(withConstrainedWidth: UIScreen.width - 90.0,
//                                                              font: Fonts.folder)
//                    cell.setup(folder: releaseNotes,
//                               height: self.isReleaseNote == false ? 0.0 : height)
//
//                    return cell
//                case SearchDetailDescriptionCell.identifier:
//                    let cell = tableView.dequeueReusableCell(for: indexPath,
//                                                             cellType: SearchDetailDescriptionCell.self)
//                    cell.setup(body: item.description)
//
//                    return cell
//                case SearchDetailGenreCell.identifier:
//                    let cell = tableView.dequeueReusableCell(for: indexPath,
//                                                             cellType: SearchDetailGenreCell.self)
//                    cell.setup(genre: item.genres)
//
//                    return cell
                default:
                    return UITableViewCell()
                }
        }.disposed(by: disposeBag)
    }
    
    private func setTableViewSelection() {
//        self.tableView.rx.itemSelected
//            .subscribe(onNext: { [weak self] indexPath in
//                if indexPath.row != 4 { return }
//                guard let self = self else { return }
//                self.isReleaseNote = !self.isReleaseNote
//                let newIndexPath: IndexPath = IndexPath(row: 5, section: 0)
//
//                if let cell: SearchDetailSimpleCell = self.tableView.cellForRow(at: indexPath) as? SearchDetailSimpleCell {
//                    cell.arrow.text = self.isReleaseNote == true ? "\u{2303}" : "\u{2304}"
//                }
//
//                self.tableView.beginUpdates()
//                self.tableView.reloadRows(at: [newIndexPath], with: .fade)
//                self.tableView.endUpdates()
//
//            }).disposed(by: self.disposeBag)
    }
}

extension SearchDetailViewController: UITableViewDelegate {
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 8
    }
}

extension SearchDetailViewController: UIScrollViewDelegate {
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        if (scrollView.contentOffset.y >= 120) {
            navigationItem.titleView?.isHidden = false
        } else {
            navigationItem.titleView?.isHidden = true
        }
    }
}
